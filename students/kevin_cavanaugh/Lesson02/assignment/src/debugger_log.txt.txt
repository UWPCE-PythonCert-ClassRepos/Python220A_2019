Microsoft Windows [Version 10.0.17134.706]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Users\13174>cd ..

C:\Users>cd ..

C:\>cd Python220

C:\Python220>cd Python220
The system cannot find the path specified.

C:\Python220>cd Python220A_2019

C:\Python220\Python220A_2019>cd students

C:\Python220\Python220A_2019\students>cd kevin_cavanaugh

C:\Python220\Python220A_2019\students\kevin_cavanaugh>cd Lesson02

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02>cd assignment

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment>cd src

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb)
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import json
  6     import datetime
  7     import math
  8     import logging
  9
 10     log_format = "%(asctime)s %(filename)s:%(lineno)-3d %(levelname)s %(message)s"
 11     log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'_debugger_log.txt'
 12
 13     formatter = logging.Formatter(log_format)
 14
 15     file_handler = logging.FileHandler(log_file)
 16     file_handler.setLevel(logging.DEBUG)
 17     file_handler.setFormatter(formatter)
 18
 19     logger = logging.getLogger()
 20     #  logger.setLevel()
 21     logger.addHandler(file_handler)
 22
 23
 24     def parse_cmd_arguments():
 25         parser = argparse.ArgumentParser(description='Process some integers.')
 26         parser.add_argument('-i', '--input', help='input JSON file', required=True)
 27         parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 28
 29         return parser.parse_args()
 30
 31
 32     def load_rentals_file(filename):
 33         with open(filename) as file:
 34             try:
 35                 data = json.load(file)
 36             except:
 37                 exit(0)
 38         return data
 39
 40     def calculate_additional_fields(data):
 41         for value in data.values():
 42             logging.debug(f"Current item: {value}")
 43             try:
 44                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 45                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 46                 value['total_days'] = (rental_end - rental_start).days
 47                 value['total_price'] = value['total_days'] * value['price_per_day']
 48                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 49                 value['unit_cost'] = value['total_price'] / value['units_rented']
 50             except:
 51                 exit(0)
 52
 53         return data
 54
 55
 56     def save_to_json(filename, data):
 57         with open(filename, 'w') as file:
 58             json.dump(data, file)
 59
 60
 61     if __name__ == "__main__":
 62         args = parse_cmd_arguments()
 63         data = load_rentals_file(args.input)
 64         data = calculate_additional_fields(data)
 65         save_to_json(args.output, data)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb)
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb)
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb)
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(10)<module>()
-> log_format = "%(asctime)s %(filename)s:%(lineno)-3d %(levelname)s %(message)s"
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(11)<module>()
-> log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'_debugger_log.txt'
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(13)<module>()
-> formatter = logging.Formatter(log_format)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(15)<module>()
-> file_handler = logging.FileHandler(log_file)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(16)<module>()
-> file_handler.setLevel(logging.DEBUG)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(17)<module>()
-> file_handler.setFormatter(formatter)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(19)<module>()
-> logger = logging.getLogger()
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(21)<module>()
-> logger.addHandler(file_handler)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(24)<module>()
-> def parse_cmd_arguments():
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)<module>()
-> def load_rentals_file(filename):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)<module>()
-> def calculate_additional_fields(data):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(56)<module>()
-> def save_to_json(filename, data):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(61)<module>()
-> if __name__ == "__main__":
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(62)<module>()
-> args = parse_cmd_arguments()
(Pdb) n
usage: charges_calc.py [-h] -i INPUT -o OUTPUT
charges_calc.py: error: the following arguments are required: -i/--input, -o/--output
SystemExit: 2
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(62)<module>()
-> args = parse_cmd_arguments()
(Pdb) n
--Return--
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(62)<module>()->None
-> args = parse_cmd_arguments()
(Pdb) n
SystemExit: 2
> <string>(1)<module>()->None
(Pdb) n
--Return--
> <string>(1)<module>()->None
(Pdb) n
The program exited via sys.exit(). Exit status: 2
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(10)<module>()
-> log_format = "%(asctime)s %(filename)s:%(lineno)-3d %(levelname)s %(message)s"
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(11)<module>()
-> log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'_debugger_log.txt'
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(13)<module>()
-> formatter = logging.Formatter(log_format)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(15)<module>()
-> file_handler = logging.FileHandler(log_file)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(16)<module>()
-> file_handler.setLevel(logging.DEBUG)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(17)<module>()
-> file_handler.setFormatter(formatter)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(19)<module>()
-> logger = logging.getLogger()
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(21)<module>()
-> logger.addHandler(file_handler)
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(24)<module>()
-> def parse_cmd_arguments():
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)<module>()
-> def load_rentals_file(filename):
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)<module>()
-> def calculate_additional_fields(data):
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(56)<module>()
-> def save_to_json(filename, data):
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(61)<module>()
-> if __name__ == "__main__":
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(62)<module>()
-> args = parse_cmd_arguments()
(Pdb) next
usage: charges_calc.py [-h] -i INPUT -o OUTPUT
charges_calc.py: error: the following arguments are required: -i/--input, -o/--output
SystemExit: 2
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(62)<module>()
-> args = parse_cmd_arguments()
(Pdb) next
--Return--
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(62)<module>()->None
-> args = parse_cmd_arguments()
(Pdb) next
SystemExit: 2
> <string>(1)<module>()->None
(Pdb) next
--Return--
> <string>(1)<module>()->None
(Pdb) next
The program exited via sys.exit(). Exit status: 2
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py --input source.json --output output.json
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(24)<module>()
-> def parse_cmd_arguments():
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)<module>()
-> def load_rentals_file(filename):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)<module>()
-> def calculate_additional_fields(data):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(56)<module>()
-> def save_to_json(filename, data):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(61)<module>()
-> if __name__ == "__main__":
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(62)<module>()
-> args = parse_cmd_arguments()
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(63)<module>()
-> data = load_rentals_file(args.input)
(Pdb) n
SystemExit: 0
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(63)<module>()
-> data = load_rentals_file(args.input)
(Pdb) n
--Return--
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(63)<module>()->None
-> data = load_rentals_file(args.input)
(Pdb) n
SystemExit: 0
> <string>(1)<module>()->None
(Pdb) n
--Return--
> <string>(1)<module>()->None
(Pdb) n
The program exited via sys.exit(). Exit status: 0
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py --input source.json --output output.json
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) pp
*** SyntaxError: unexpected EOF while parsing
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import json
  6     import datetime
  7     import math
  8     import logging
  9
 10     # log_format = "%(asctime)s %(filename)s:%(lineno)-3d %(levelname)s %(message)s"
 11     # log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'_debugger_log.txt'
 12     #
 13     # formatter = logging.Formatter(log_format)
 14     #
 15     # file_handler = logging.FileHandler(log_file)
 16     # file_handler.setLevel(logging.DEBUG)
 17     # file_handler.setFormatter(formatter)
 18     #
 19     # logger = logging.getLogger()
 20     # #  logger.setLevel()
 21     # logger.addHandler(file_handler)
 22
 23
 24     def parse_cmd_arguments():
 25         parser = argparse.ArgumentParser(description='Process some integers.')
 26         parser.add_argument('-i', '--input', help='input JSON file', required=True)
 27         parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 28
 29         return parser.parse_args()
 30
 31
 32     def load_rentals_file(filename):
 33         with open(filename) as file:
 34             try:
 35                 data = json.load(file)
 36             except:
 37                 exit(0)
 38         return data
 39
 40     def calculate_additional_fields(data):
 41         for value in data.values():
 42             try:
 43                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 44                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 45                 value['total_days'] = (rental_end - rental_start).days
 46                 value['total_price'] = value['total_days'] * value['price_per_day']
 47                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 48                 value['unit_cost'] = value['total_price'] / value['units_rented']
 49             except:
 50                 exit(0)
 51
 52         return data
 53
 54
 55     def save_to_json(filename, data):
 56         with open(filename, 'w') as file:
 57             json.dump(data, file)
 58
 59
 60     if __name__ == "__main__":
 61         args = parse_cmd_arguments()
 62         data = load_rentals_file(args.input)
 63         data = calculate_additional_fields(data)
 64         save_to_json(args.output, data)
(Pdb) b 40
Breakpoint 1 at c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py:40
(Pdb) c
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)<module>()
-> def calculate_additional_fields(data):
(Pdb) s
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(55)<module>()
-> def save_to_json(filename, data):
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py --input source.json --output output.json
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import json
  6     import datetime
  7     import math
  8     import logging
  9
 10     # log_format = "%(asctime)s %(filename)s:%(lineno)-3d %(levelname)s %(message)s"
 11     # log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'_debugger_log.txt'
 12     #
 13     # formatter = logging.Formatter(log_format)
 14     #
 15     # file_handler = logging.FileHandler(log_file)
 16     # file_handler.setLevel(logging.DEBUG)
 17     # file_handler.setFormatter(formatter)
 18     #
 19     # logger = logging.getLogger()
 20     # #  logger.setLevel()
 21     # logger.addHandler(file_handler)
 22
 23
 24     def parse_cmd_arguments():
 25         parser = argparse.ArgumentParser(description='Process some integers.')
 26         parser.add_argument('-i', '--input', help='input JSON file', required=True)
 27         parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 28
 29         return parser.parse_args()
 30
 31
 32     def load_rentals_file(filename):
 33         with open(filename) as file:
 34             try:
 35                 data = json.load(file)
 36             except:
 37                 exit(0)
 38         return data
 39
 40     def calculate_additional_fields(data):
 41         for value in data.values():
 42             try:
 43                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 44                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 45                 value['total_days'] = (rental_end - rental_start).days
 46                 value['total_price'] = value['total_days'] * value['price_per_day']
 47                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 48                 value['unit_cost'] = value['total_price'] / value['units_rented']
 49             except:
 50                 exit(0)
 51
 52         return data
 53
 54
 55     def save_to_json(filename, data):
 56         with open(filename, 'w') as file:
 57             json.dump(data, file)
 58
 59
 60     if __name__ == "__main__":
 61         args = parse_cmd_arguments()
 62         data = load_rentals_file(args.input)
 63         data = calculate_additional_fields(data)
 64         save_to_json(args.output, data)
(Pdb) b 63
Breakpoint 1 at c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py:63
(Pdb) c
The program exited via sys.exit(). Exit status: 0
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py --input source.json --output output.json
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import json
  6     import datetime
  7     import math
  8     import logging
  9
 10     # log_format = "%(asctime)s %(filename)s:%(lineno)-3d %(levelname)s %(message)s"
 11     # log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'_debugger_log.txt'
 12     #
 13     # formatter = logging.Formatter(log_format)
 14     #
 15     # file_handler = logging.FileHandler(log_file)
 16     # file_handler.setLevel(logging.DEBUG)
 17     # file_handler.setFormatter(formatter)
 18     #
 19     # logger = logging.getLogger()
 20     # #  logger.setLevel()
 21     # logger.addHandler(file_handler)
 22
 23
 24     def parse_cmd_arguments():
 25         parser = argparse.ArgumentParser(description='Process some integers.')
 26         parser.add_argument('-i', '--input', help='input JSON file', required=True)
 27         parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 28
 29         return parser.parse_args()
 30
 31
 32     def load_rentals_file(filename):
 33         with open(filename) as file:
 34             try:
 35                 data = json.load(file)
 36             except:
 37                 exit(0)
 38         return data
 39
 40     def calculate_additional_fields(data):
 41         for value in data.values():
 42             try:
 43                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 44                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 45                 value['total_days'] = (rental_end - rental_start).days
 46                 value['total_price'] = value['total_days'] * value['price_per_day']
 47                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 48                 value['unit_cost'] = value['total_price'] / value['units_rented']
 49             except:
 50                 exit(0)
 51
 52         return data
 53
 54
 55     def save_to_json(filename, data):
 56         with open(filename, 'w') as file:
 57             json.dump(data, file)
 58
 59
 60     if __name__ == "__main__":
 61         args = parse_cmd_arguments()
 62         data = load_rentals_file(args.input)
 63         data = calculate_additional_fields(data)
 64         save_to_json(args.output, data)
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(24)<module>()
-> def parse_cmd_arguments():
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)<module>()
-> def load_rentals_file(filename):
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)<module>()
-> def calculate_additional_fields(data):
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(55)<module>()
-> def save_to_json(filename, data):
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(60)<module>()
-> if __name__ == "__main__":
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(61)<module>()
-> args = parse_cmd_arguments()
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(62)<module>()
-> data = load_rentals_file(args.input)
(Pdb) step
--Call--
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)load_rentals_file()
-> def load_rentals_file(filename):
(Pdb) ll
 32  -> def load_rentals_file(filename):
 33         with open(filename) as file:
 34             try:
 35                 data = json.load(file)
 36             except:
 37                 exit(0)
 38         return data
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(33)load_rentals_file()
-> with open(filename) as file:
(Pdb) pp file
*** NameError: name 'file' is not defined
(Pdb) pp filename
'source.json'
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(34)load_rentals_file()
-> try:
(Pdb) next
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(35)load_rentals_file()
-> data = json.load(file)
(Pdb) next
json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 5884 column 23 (char 130093)
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(35)load_rentals_file()
-> data = json.load(file)
(Pdb) exit
The program exited via sys.exit(). Exit status: 0
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py --input source.json --output output.json
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb) j?
*** The 'jump' command requires a line number
(Pdb) ?j
j(ump) lineno
        Set the next line that will be executed.  Only available in
        the bottom-most frame.  This lets you jump back and execute
        code again, or jump forward to skip code that you don't want
        to run.

        It should be noted that not all jumps are allowed -- for
        instance it is not possible to jump into the middle of a
        for loop or out of a finally clause.
(Pdb) j 60
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(60)<module>()
-> if __name__ == "__main__":
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py --input source.json --output output.json
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) ?c
c(ont(inue))
        Continue execution, only stop when a breakpoint is encountered.
(Pdb) ?

Documented commands (type help <topic>):
========================================
EOF    c          d        h         list      q        rv       undisplay
a      cl         debug    help      ll        quit     s        unt
alias  clear      disable  ignore    longlist  r        source   until
args   commands   display  interact  n         restart  step     up
b      condition  down     j         next      return   tbreak   w
break  cont       enable   jump      p         retval   u        whatis
bt     continue   exit     l         pp        run      unalias  where

Miscellaneous help topics:
==========================
exec  pdb

(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(24)<module>()
-> def parse_cmd_arguments():
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)<module>()
-> def load_rentals_file(filename):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)<module>()
-> def calculate_additional_fields(data):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(55)<module>()
-> def save_to_json(filename, data):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(60)<module>()
-> if __name__ == "__main__":
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(61)<module>()
-> args = parse_cmd_arguments()
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(62)<module>()
-> data = load_rentals_file(args.input)
(Pdb) s
--Call--
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)load_rentals_file()
-> def load_rentals_file(filename):
(Pdb) ll
 32  -> def load_rentals_file(filename):
 33         with open(filename) as file:
 34             try:
 35                 data = json.load(file)
 36             except:
 37                 exit(0)
 38         return data
(Pdb) c
The program exited via sys.exit(). Exit status: 0
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(24)<module>()
-> def parse_cmd_arguments():
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)<module>()
-> def load_rentals_file(filename):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)<module>()
-> def calculate_additional_fields(data):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(55)<module>()
-> def save_to_json(filename, data):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(60)<module>()
-> if __name__ == "__main__":
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(61)<module>()
-> args = parse_cmd_arguments()
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(62)<module>()
-> data = load_rentals_file(args.input)
(Pdb) s
--Call--
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)load_rentals_file()
-> def load_rentals_file(filename):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(33)load_rentals_file()
-> with open(filename) as file:
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(34)load_rentals_file()
-> try:
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(35)load_rentals_file()
-> data = json.load(file)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(38)load_rentals_file()
-> return data
(Pdb) n
--Return--
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(38)load_rentals_file()->{'RNT001': {'price_per_day': 31, 'product_code': 'PRD80', 'rental_end': '3/22/17', 'rental_start': '6/12/17', ...}, 'RNT002': {'price_per_day': 16, 'product_code': 'PRD11', 'rental_end': '9/30/18', 'rental_start': '7/20/16', ...}, 'RNT003': {'price_per_day': 40, 'product_code': 'PRD22', 'rental_end': '6/4/17', 'rental_start': '2/1/16', ...}, 'RNT004': {'price_per_day': 40, 'product_code': 'PRD86', 'rental_end': '12/7/17', 'rental_start': '8/14/16', ...}, ...}
-> return data
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(63)<module>()
-> data = calculate_additional_fields(data)
(Pdb) s
--Call--
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)calculate_additional_fields()
-> def calculate_additional_fields(data):
(Pdb) ll
 40  -> def calculate_additional_fields(data):
 41         for value in data.values():
 42             try:
 43                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 44                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 45                 value['total_days'] = (rental_end - rental_start).days
 46                 value['total_price'] = value['total_days'] * value['price_per_day']
 47                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 48                 value['unit_cost'] = value['total_price'] / value['units_rented']
 49             except:
 50                 exit(0)
 51
 52         return data
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(41)calculate_additional_fields()
-> for value in data.values():
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(42)calculate_additional_fields()
-> try:
(Pdb) pp value
{'price_per_day': 31,
 'product_code': 'PRD80',
 'rental_end': '3/22/17',
 'rental_start': '6/12/17',
 'units_rented': 8}
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(43)calculate_additional_fields()
-> rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(44)calculate_additional_fields()
-> rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(45)calculate_additional_fields()
-> value['total_days'] = (rental_end - rental_start).days
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(46)calculate_additional_fields()
-> value['total_price'] = value['total_days'] * value['price_per_day']
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(47)calculate_additional_fields()
-> value['sqrt_total_price'] = math.sqrt(value['total_price'])
(Pdb) n
ValueError: math domain error
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(47)calculate_additional_fields()
-> value['sqrt_total_price'] = math.sqrt(value['total_price'])
(Pdb) ll
 40     def calculate_additional_fields(data):
 41         for value in data.values():
 42             try:
 43                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 44                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 45                 value['total_days'] = (rental_end - rental_start).days
 46                 value['total_price'] = value['total_days'] * value['price_per_day']
 47  ->             value['sqrt_total_price'] = math.sqrt(value['total_price'])
 48                 value['unit_cost'] = value['total_price'] / value['units_rented']
 49             except:
 50                 exit(0)
 51
 52         return data
(Pdb) pp rental_end
datetime.datetime(2017, 3, 22, 0, 0)
(Pdb) pp rental_start
datetime.datetime(2017, 6, 12, 0, 0)
(Pdb) exit
The program exited via sys.exit(). Exit status: 0
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) xit
*** NameError: name 'xit' is not defined
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python charges_calc.py --input source.json --output output.json

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py --input source.json --output output.json
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import json
  6     import datetime
  7     import math
  8     import logging
  9
 10     # log_format = "%(asctime)s %(filename)s:%(lineno)-3d %(levelname)s %(message)s"
 11     # log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'_debugger_log.txt'
 12     #
 13     # formatter = logging.Formatter(log_format)
 14     #
 15     # file_handler = logging.FileHandler(log_file)
 16     # file_handler.setLevel(logging.DEBUG)
 17     # file_handler.setFormatter(formatter)
 18     #
 19     # logger = logging.getLogger()
 20     # #  logger.setLevel()
 21     # logger.addHandler(file_handler)
 22
 23
 24     def parse_cmd_arguments():
 25         parser = argparse.ArgumentParser(description='Process some integers.')
 26         parser.add_argument('-i', '--input', help='input JSON file', required=True)
 27         parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 28
 29         return parser.parse_args()
 30
 31
 32     def load_rentals_file(filename):
 33         with open(filename) as file:
 34             try:
 35                 data = json.load(file)
 36             except:
 37                 exit(0)
 38         return data
 39
 40     def calculate_additional_fields(data):
 41         for value in data.values():
 42             try:
 43                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 44                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 45                 if rental_end > rental_start:
 46                     logging.error(f"The end date cannot,{value['rental_end']}, "
 47                                   f"be before the start date,{value['rental_start']}.")
 48                 elif rental_end == rental_start:
 49                     logging.warning(f"Return occurred same day, {value['rental_start']}.")
 50                 else:
 51                     value['total_days'] = (rental_end - rental_start).days
 52                     value['total_price'] = value['total_days'] * value['price_per_day']
 53                     value['sqrt_total_price'] = math.sqrt(value['total_price'])
 54                     value['unit_cost'] = value['total_price'] / value['units_rented']
 55             except:
 56                 exit(0)
 57
 58         return data
 59
 60
 61     def save_to_json(filename, data):
 62         with open(filename, 'w') as file:
 63             json.dump(data, file)
 64
 65
 66     if __name__ == "__main__":
 67         args = parse_cmd_arguments()
 68         data = load_rentals_file(args.input)
 69         data = calculate_additional_fields(data)
 70         save_to_json(args.output, data)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(24)<module>()
-> def parse_cmd_arguments():
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)<module>()
-> def load_rentals_file(filename):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)<module>()
-> def calculate_additional_fields(data):
(Pdb) nn
*** NameError: name 'nn' is not defined
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(61)<module>()
-> def save_to_json(filename, data):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(66)<module>()
-> if __name__ == "__main__":
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(67)<module>()
-> args = parse_cmd_arguments()
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(68)<module>()
-> data = load_rentals_file(args.input)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(69)<module>()
-> data = calculate_additional_fields(data)
(Pdb) n
SystemExit: 0
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(69)<module>()
-> data = calculate_additional_fields(data)
(Pdb) n
--Return--
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(69)<module>()->None
-> data = calculate_additional_fields(data)
(Pdb) n
SystemExit: 0
> <string>(1)<module>()->None
(Pdb) n
--Return--
> <string>(1)<module>()->None
(Pdb) n
The program exited via sys.exit(). Exit status: 0
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(24)<module>()
-> def parse_cmd_arguments():
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)<module>()
-> def load_rentals_file(filename):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)<module>()
-> def calculate_additional_fields(data):
(Pdb) s
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(61)<module>()
-> def save_to_json(filename, data):
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3     '''
  4     import argparse
  5     import json
  6     import datetime
  7     import math
  8     import logging
  9
 10     # log_format = "%(asctime)s %(filename)s:%(lineno)-3d %(levelname)s %(message)s"
 11     # log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'_debugger_log.txt'
 12     #
 13     # formatter = logging.Formatter(log_format)
 14     #
 15     # file_handler = logging.FileHandler(log_file)
 16     # file_handler.setLevel(logging.DEBUG)
 17     # file_handler.setFormatter(formatter)
 18     #
 19     # logger = logging.getLogger()
 20     # #  logger.setLevel()
 21     # logger.addHandler(file_handler)
 22
 23
 24     def parse_cmd_arguments():
 25         parser = argparse.ArgumentParser(description='Process some integers.')
 26         parser.add_argument('-i', '--input', help='input JSON file', required=True)
 27         parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 28
 29         return parser.parse_args()
 30
 31
 32     def load_rentals_file(filename):
 33         with open(filename) as file:
 34             try:
 35                 data = json.load(file)
 36             except:
 37                 exit(0)
 38         return data
 39
 40     def calculate_additional_fields(data):
 41         for value in data.values():
 42             try:
 43                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 44                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 45                 if rental_end > rental_start:
 46                     logging.error(f"The end date cannot,{value['rental_end']}, "
 47                                   f"be before the start date,{value['rental_start']}.")
 48                 elif rental_end == rental_start:
 49                     logging.warning(f"Return occurred same day, {value['rental_start']}.")
 50                 else:
 51                     value['total_days'] = (rental_end - rental_start).days
 52                     value['total_price'] = value['total_days'] * value['price_per_day']
 53                     value['sqrt_total_price'] = math.sqrt(value['total_price'])
 54                     value['unit_cost'] = value['total_price'] / value['units_rented']
 55             except:
 56                 exit(0)
 57
 58         return data
 59
 60
 61  -> def save_to_json(filename, data):
 62         with open(filename, 'w') as file:
 63             json.dump(data, file)
 64
 65
 66     if __name__ == "__main__":
 67         args = parse_cmd_arguments()
 68         data = load_rentals_file(args.input)
 69         data = calculate_additional_fields(data)
 70         save_to_json(args.output, data)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(66)<module>()
-> if __name__ == "__main__":
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py --input source.json --output output.json
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py --input source.json --output output.json
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(24)<module>()
-> def parse_cmd_arguments():
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)<module>()
-> def load_rentals_file(filename):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)<module>()
-> def calculate_additional_fields(data):
(Pdb) s
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(61)<module>()
-> def save_to_json(filename, data):
(Pdb)
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(66)<module>()
-> if __name__ == "__main__":
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python -m pdb charges_calc.py --input source.json --output output.json
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(4)<module>()
-> import argparse
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(5)<module>()
-> import json
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(6)<module>()
-> import datetime
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(7)<module>()
-> import math
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(8)<module>()
-> import logging
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(24)<module>()
-> def parse_cmd_arguments():
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(32)<module>()
-> def load_rentals_file(filename):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)<module>()
-> def calculate_additional_fields(data):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(61)<module>()
-> def save_to_json(filename, data):
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(66)<module>()
-> if __name__ == "__main__":
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(67)<module>()
-> args = parse_cmd_arguments()
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(68)<module>()
-> data = load_rentals_file(args.input)
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(69)<module>()
-> data = calculate_additional_fields(data)
(Pdb) s
--Call--
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(40)calculate_additional_fields()
-> def calculate_additional_fields(data):
(Pdb) ll
 40  -> def calculate_additional_fields(data):
 41         for value in data.values():
 42             try:
 43                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 44                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 45                 if rental_end > rental_start:
 46                     logging.error(f"The end date cannot,{value['rental_end']}, "
 47                                   f"be before the start date,{value['rental_start']}.")
 48                 elif rental_end == rental_start:
 49                     logging.warning(f"Return occurred same day, {value['rental_start']}.")
 50                 else:
 51                     value['total_days'] = (rental_end - rental_start).days
 52                     value['total_price'] = value['total_days'] * value['price_per_day']
 53                     value['sqrt_total_price'] = math.sqrt(value['total_price'])
 54                     value['unit_cost'] = value['total_price'] / value['units_rented']
 55             except:
 56                 exit(0)
 57
 58         return data
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(41)calculate_additional_fields()
-> for value in data.values():
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(42)calculate_additional_fields()
-> try:
(Pdb) n
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(43)calculate_additional_fields()
-> rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
(Pdb) exit
The program exited via sys.exit(). Exit status: 0
> c:\python220\python220a_2019\students\kevin_cavanaugh\lesson02\assignment\src\charges_calc.py(3)<module>()
-> '''
(Pdb) exit

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python charges_calc.py --input source.json --output output.json
ERROR:root:The end date cannot,3/22/17, be before the start date,6/12/17.
ERROR:root:The end date cannot,7/29/18, be before the start date,8/26/18.
ERROR:root:The end date cannot,5/31/17, be before the start date,7/10/17.
ERROR:root:The end date cannot,7/4/18, be before the start date,10/25/18.
ERROR:root:The end date cannot,7/28/16, be before the start date,11/3/18.
ERROR:root:The end date cannot,8/27/17, be before the start date,3/15/18.
ERROR:root:The end date cannot,4/29/16, be before the start date,9/29/17.
ERROR:root:The end date cannot,1/15/16, be before the start date,10/24/17.
ERROR:root:The end date cannot,7/30/16, be before the start date,1/30/17.
ERROR:root:The end date cannot,2/5/16, be before the start date,6/18/18.
ERROR:root:The end date cannot,4/11/18, be before the start date,4/28/18.
ERROR:root:The end date cannot,1/13/16, be before the start date,8/16/16.
ERROR:root:The end date cannot,5/10/16, be before the start date,12/16/17.
ERROR:root:The end date cannot,1/12/16, be before the start date,6/20/18.
ERROR:root:The end date cannot,2/9/16, be before the start date,8/31/17.
ERROR:root:The end date cannot,5/28/16, be before the start date,3/2/18.
ERROR:root:The end date cannot,4/21/16, be before the start date,3/27/18.
ERROR:root:The end date cannot,5/6/17, be before the start date,7/6/18.
ERROR:root:The end date cannot,4/18/17, be before the start date,7/1/17.
ERROR:root:The end date cannot,4/13/17, be before the start date,4/18/18.
ERROR:root:The end date cannot,4/3/16, be before the start date,10/11/17.
WARNING:root:Return occurred same day, 7/24/16.
ERROR:root:The end date cannot,12/30/16, be before the start date,12/1/17.
ERROR:root:The end date cannot,3/30/17, be before the start date,2/19/18.
ERROR:root:The end date cannot,12/19/16, be before the start date,9/4/18.
ERROR:root:The end date cannot,11/12/18, be before the start date,12/19/18.
ERROR:root:The end date cannot,1/8/18, be before the start date,10/15/18.
ERROR:root:The end date cannot,6/24/16, be before the start date,8/3/18.
ERROR:root:The end date cannot,10/28/16, be before the start date,9/5/17.
ERROR:root:The end date cannot,6/30/17, be before the start date,12/6/18.
ERROR:root:The end date cannot,2/27/16, be before the start date,4/12/18.
ERROR:root:The end date cannot,1/25/17, be before the start date,7/14/17.
ERROR:root:The end date cannot,1/18/16, be before the start date,2/15/16.
ERROR:root:The end date cannot,2/28/17, be before the start date,2/12/18.
ERROR:root:The end date cannot,6/3/18, be before the start date,8/25/18.
ERROR:root:The end date cannot,12/12/16, be before the start date,10/11/18.
ERROR:root:The end date cannot,10/18/17, be before the start date,1/18/18.
ERROR:root:The end date cannot,5/25/16, be before the start date,10/5/16.
ERROR:root:The end date cannot,7/14/17, be before the start date,9/9/17.
ERROR:root:The end date cannot,5/12/16, be before the start date,6/6/18.
ERROR:root:The end date cannot,11/19/16, be before the start date,8/15/18.
ERROR:root:The end date cannot,1/27/18, be before the start date,11/27/18.
ERROR:root:The end date cannot,4/29/16, be before the start date,5/13/17.
ERROR:root:The end date cannot,3/20/18, be before the start date,12/3/18.
ERROR:root:The end date cannot,6/18/16, be before the start date,8/10/16.
ERROR:root:The end date cannot,8/15/18, be before the start date,11/5/18.
ERROR:root:The end date cannot,5/23/16, be before the start date,3/10/17.
ERROR:root:The end date cannot,7/23/17, be before the start date,8/5/18.
ERROR:root:The end date cannot,8/29/16, be before the start date,1/11/17.
ERROR:root:The end date cannot,10/21/16, be before the start date,11/23/18.
ERROR:root:The end date cannot,5/21/16, be before the start date,6/16/18.
ERROR:root:The end date cannot,9/20/17, be before the start date,12/3/18.
ERROR:root:The end date cannot,12/8/16, be before the start date,7/17/17.
ERROR:root:The end date cannot,2/18/16, be before the start date,1/24/17.
ERROR:root:The end date cannot,8/30/16, be before the start date,12/20/17.
ERROR:root:The end date cannot,2/20/16, be before the start date,12/29/17.
ERROR:root:The end date cannot,1/1/18, be before the start date,3/14/18.
ERROR:root:The end date cannot,6/4/16, be before the start date,5/30/17.
ERROR:root:The end date cannot,1/9/17, be before the start date,6/26/18.
ERROR:root:The end date cannot,1/9/16, be before the start date,6/6/17.
ERROR:root:The end date cannot,2/3/16, be before the start date,5/11/18.
ERROR:root:The end date cannot,8/4/16, be before the start date,4/14/17.
ERROR:root:The end date cannot,6/4/17, be before the start date,7/23/18.
ERROR:root:The end date cannot,12/18/17, be before the start date,7/19/18.
ERROR:root:The end date cannot,8/1/16, be before the start date,1/3/17.
ERROR:root:The end date cannot,2/25/17, be before the start date,11/30/18.
ERROR:root:The end date cannot,4/5/17, be before the start date,12/4/18.
ERROR:root:The end date cannot,7/25/17, be before the start date,3/2/18.
ERROR:root:The end date cannot,7/30/18, be before the start date,12/15/18.
ERROR:root:The end date cannot,5/23/17, be before the start date,3/23/18.
ERROR:root:The end date cannot,6/21/17, be before the start date,12/17/18.
ERROR:root:The end date cannot,8/11/16, be before the start date,10/13/16.
ERROR:root:The end date cannot,5/1/17, be before the start date,9/13/17.
ERROR:root:The end date cannot,3/22/17, be before the start date,1/20/18.
ERROR:root:The end date cannot,5/2/16, be before the start date,11/15/16.
ERROR:root:The end date cannot,1/3/16, be before the start date,11/20/18.
ERROR:root:The end date cannot,7/15/16, be before the start date,7/28/18.
ERROR:root:The end date cannot,9/17/18, be before the start date,10/20/18.
ERROR:root:The end date cannot,11/3/16, be before the start date,9/29/18.
ERROR:root:The end date cannot,8/16/16, be before the start date,8/11/18.
WARNING:root:Return occurred same day, 12/24/17.
ERROR:root:The end date cannot,3/30/16, be before the start date,5/24/17.
ERROR:root:The end date cannot,7/19/17, be before the start date,1/7/18.
ERROR:root:The end date cannot,5/19/17, be before the start date,12/23/18.
ERROR:root:The end date cannot,3/6/16, be before the start date,7/10/18.
ERROR:root:The end date cannot,3/14/18, be before the start date,5/18/18.
ERROR:root:The end date cannot,9/10/16, be before the start date,12/16/16.
ERROR:root:The end date cannot,8/7/17, be before the start date,4/24/18.
ERROR:root:The end date cannot,2/15/16, be before the start date,4/14/18.
ERROR:root:The end date cannot,12/11/16, be before the start date,2/3/17.
ERROR:root:The end date cannot,5/25/16, be before the start date,10/15/16.
ERROR:root:The end date cannot,9/25/16, be before the start date,3/18/18.
ERROR:root:The end date cannot,1/11/17, be before the start date,9/16/18.
ERROR:root:The end date cannot,3/15/18, be before the start date,5/16/18.
ERROR:root:The end date cannot,4/7/18, be before the start date,8/1/18.
ERROR:root:The end date cannot,8/14/18, be before the start date,8/24/18.
ERROR:root:The end date cannot,9/8/16, be before the start date,12/29/18.
ERROR:root:The end date cannot,4/8/18, be before the start date,5/31/18.
ERROR:root:The end date cannot,9/28/16, be before the start date,3/12/18.
ERROR:root:The end date cannot,1/11/16, be before the start date,10/5/17.
ERROR:root:The end date cannot,8/17/16, be before the start date,11/20/16.
ERROR:root:The end date cannot,4/30/17, be before the start date,5/10/17.
ERROR:root:The end date cannot,1/6/16, be before the start date,5/4/18.
ERROR:root:The end date cannot,5/4/16, be before the start date,10/28/18.
ERROR:root:The end date cannot,11/14/17, be before the start date,3/2/18.
ERROR:root:The end date cannot,9/17/16, be before the start date,10/12/17.
ERROR:root:The end date cannot,2/7/16, be before the start date,11/4/18.
ERROR:root:The end date cannot,6/3/16, be before the start date,3/15/18.
ERROR:root:The end date cannot,2/18/16, be before the start date,2/24/16.
ERROR:root:The end date cannot,1/2/17, be before the start date,7/5/17.
ERROR:root:The end date cannot,6/29/16, be before the start date,12/4/16.
ERROR:root:The end date cannot,2/10/16, be before the start date,4/20/16.
ERROR:root:The end date cannot,8/4/16, be before the start date,8/18/18.
ERROR:root:The end date cannot,12/23/16, be before the start date,12/11/17.
ERROR:root:The end date cannot,7/28/16, be before the start date,10/26/18.
ERROR:root:The end date cannot,4/28/16, be before the start date,2/3/18.
ERROR:root:The end date cannot,10/7/16, be before the start date,11/5/17.
ERROR:root:The end date cannot,12/24/16, be before the start date,5/15/17.
ERROR:root:The end date cannot,2/4/16, be before the start date,5/11/18.
ERROR:root:The end date cannot,11/3/16, be before the start date,2/23/17.
ERROR:root:The end date cannot,7/25/16, be before the start date,4/27/18.
ERROR:root:The end date cannot,1/20/18, be before the start date,4/25/18.
ERROR:root:The end date cannot,3/25/16, be before the start date,12/17/18.
ERROR:root:The end date cannot,8/7/17, be before the start date,1/1/18.
ERROR:root:The end date cannot,12/7/17, be before the start date,7/2/18.
ERROR:root:The end date cannot,2/18/16, be before the start date,1/31/17.
ERROR:root:The end date cannot,10/13/16, be before the start date,12/8/17.
ERROR:root:The end date cannot,9/16/16, be before the start date,6/25/18.
ERROR:root:The end date cannot,8/28/17, be before the start date,2/2/18.
ERROR:root:The end date cannot,6/10/17, be before the start date,7/10/17.
ERROR:root:The end date cannot,4/17/16, be before the start date,10/31/16.
ERROR:root:The end date cannot,4/10/17, be before the start date,10/21/17.
ERROR:root:The end date cannot,8/16/16, be before the start date,2/14/18.
ERROR:root:The end date cannot,1/19/17, be before the start date,1/28/18.
ERROR:root:The end date cannot,11/10/17, be before the start date,3/14/18.
ERROR:root:The end date cannot,9/26/16, be before the start date,9/25/18.
ERROR:root:The end date cannot,10/7/17, be before the start date,10/8/17.
ERROR:root:The end date cannot,7/24/16, be before the start date,8/30/16.
ERROR:root:The end date cannot,8/7/16, be before the start date,11/27/18.
ERROR:root:The end date cannot,5/19/17, be before the start date,7/31/17.
ERROR:root:The end date cannot,2/12/17, be before the start date,12/15/18.
ERROR:root:The end date cannot,10/21/16, be before the start date,8/7/18.
ERROR:root:The end date cannot,9/4/17, be before the start date,2/3/18.
ERROR:root:The end date cannot,6/30/18, be before the start date,7/18/18.
ERROR:root:The end date cannot,9/13/18, be before the start date,12/31/18.
ERROR:root:The end date cannot,5/12/16, be before the start date,5/17/16.
ERROR:root:The end date cannot,4/25/16, be before the start date,11/10/16.
ERROR:root:The end date cannot,5/13/16, be before the start date,12/8/17.
ERROR:root:The end date cannot,7/8/18, be before the start date,12/11/18.
ERROR:root:The end date cannot,10/8/16, be before the start date,10/13/16.
ERROR:root:The end date cannot,6/30/16, be before the start date,1/27/17.
ERROR:root:The end date cannot,1/29/16, be before the start date,8/10/17.
ERROR:root:The end date cannot,2/22/16, be before the start date,12/2/16.
ERROR:root:The end date cannot,5/23/17, be before the start date,7/2/18.
ERROR:root:The end date cannot,12/31/17, be before the start date,6/29/18.
ERROR:root:The end date cannot,4/20/16, be before the start date,1/10/18.
ERROR:root:The end date cannot,1/21/17, be before the start date,8/6/18.
ERROR:root:The end date cannot,4/28/16, be before the start date,7/25/16.
ERROR:root:The end date cannot,10/26/17, be before the start date,12/3/17.
ERROR:root:The end date cannot,7/5/16, be before the start date,11/28/18.
ERROR:root:The end date cannot,5/19/17, be before the start date,12/24/18.
ERROR:root:The end date cannot,3/26/17, be before the start date,6/17/17.
ERROR:root:The end date cannot,2/17/17, be before the start date,1/23/18.
ERROR:root:The end date cannot,3/6/17, be before the start date,7/25/18.
ERROR:root:The end date cannot,12/21/16, be before the start date,9/19/17.
ERROR:root:The end date cannot,4/14/16, be before the start date,1/9/17.
ERROR:root:The end date cannot,8/25/17, be before the start date,10/16/18.
ERROR:root:The end date cannot,6/9/17, be before the start date,4/18/18.
ERROR:root:The end date cannot,2/3/16, be before the start date,12/29/18.
ERROR:root:The end date cannot,6/10/16, be before the start date,5/18/18.
ERROR:root:The end date cannot,7/6/17, be before the start date,7/8/17.
ERROR:root:The end date cannot,12/4/17, be before the start date,12/19/17.
ERROR:root:The end date cannot,12/13/16, be before the start date,9/3/17.
ERROR:root:The end date cannot,3/25/17, be before the start date,12/16/17.
ERROR:root:The end date cannot,3/1/16, be before the start date,7/12/17.
ERROR:root:The end date cannot,1/17/17, be before the start date,2/15/17.
ERROR:root:The end date cannot,10/22/16, be before the start date,5/15/17.
ERROR:root:The end date cannot,3/21/17, be before the start date,9/17/18.
ERROR:root:The end date cannot,9/21/17, be before the start date,4/17/18.
ERROR:root:The end date cannot,1/15/17, be before the start date,7/16/18.
ERROR:root:The end date cannot,12/13/16, be before the start date,10/4/17.
ERROR:root:The end date cannot,7/30/18, be before the start date,9/13/18.
ERROR:root:The end date cannot,8/21/17, be before the start date,1/16/18.
ERROR:root:The end date cannot,3/5/16, be before the start date,1/29/18.
ERROR:root:The end date cannot,5/21/18, be before the start date,6/12/18.
ERROR:root:The end date cannot,5/14/18, be before the start date,6/24/18.
ERROR:root:The end date cannot,10/8/17, be before the start date,7/24/18.
ERROR:root:The end date cannot,6/10/17, be before the start date,11/20/18.
ERROR:root:The end date cannot,9/17/16, be before the start date,9/14/17.
ERROR:root:The end date cannot,1/15/18, be before the start date,6/28/18.
ERROR:root:The end date cannot,4/20/17, be before the start date,11/20/17.
ERROR:root:The end date cannot,11/21/16, be before the start date,9/11/18.
ERROR:root:The end date cannot,12/26/16, be before the start date,5/28/18.
ERROR:root:The end date cannot,5/6/17, be before the start date,5/28/17.
ERROR:root:The end date cannot,5/29/17, be before the start date,11/28/17.
ERROR:root:The end date cannot,6/9/16, be before the start date,1/5/17.
ERROR:root:The end date cannot,7/18/16, be before the start date,12/28/18.
ERROR:root:The end date cannot,12/11/16, be before the start date,7/21/18.
ERROR:root:The end date cannot,8/6/17, be before the start date,8/18/17.
ERROR:root:The end date cannot,4/4/18, be before the start date,7/17/18.
ERROR:root:The end date cannot,1/10/17, be before the start date,2/15/18.
ERROR:root:The end date cannot,12/29/17, be before the start date,3/31/18.
ERROR:root:The end date cannot,5/11/16, be before the start date,6/22/17.
ERROR:root:The end date cannot,3/6/17, be before the start date,10/12/18.
ERROR:root:The end date cannot,4/17/17, be before the start date,10/9/18.
ERROR:root:The end date cannot,1/2/17, be before the start date,2/1/17.
ERROR:root:The end date cannot,11/18/16, be before the start date,8/16/17.
ERROR:root:The end date cannot,9/16/17, be before the start date,6/30/18.
ERROR:root:The end date cannot,10/1/17, be before the start date,9/22/18.
ERROR:root:The end date cannot,11/4/16, be before the start date,8/5/17.
ERROR:root:The end date cannot,2/18/17, be before the start date,10/26/17.
ERROR:root:The end date cannot,4/14/16, be before the start date,12/6/17.
ERROR:root:The end date cannot,7/18/16, be before the start date,12/24/16.
ERROR:root:The end date cannot,1/25/16, be before the start date,10/17/16.
ERROR:root:The end date cannot,4/27/16, be before the start date,9/27/18.
ERROR:root:The end date cannot,1/9/17, be before the start date,5/5/18.
ERROR:root:The end date cannot,6/11/16, be before the start date,11/11/16.
ERROR:root:The end date cannot,4/11/18, be before the start date,5/3/18.
ERROR:root:The end date cannot,1/24/16, be before the start date,11/22/16.
ERROR:root:The end date cannot,5/7/17, be before the start date,4/17/18.
ERROR:root:The end date cannot,12/3/16, be before the start date,11/24/18.
ERROR:root:The end date cannot,2/18/16, be before the start date,8/7/18.
ERROR:root:The end date cannot,10/24/17, be before the start date,2/22/18.
ERROR:root:The end date cannot,6/26/16, be before the start date,6/30/18.
ERROR:root:The end date cannot,7/7/17, be before the start date,11/14/17.
ERROR:root:The end date cannot,7/30/17, be before the start date,10/17/18.
ERROR:root:The end date cannot,10/16/16, be before the start date,3/23/17.
ERROR:root:The end date cannot,7/23/16, be before the start date,10/10/18.
ERROR:root:The end date cannot,8/25/18, be before the start date,9/28/18.
ERROR:root:The end date cannot,11/25/16, be before the start date,8/6/18.
ERROR:root:The end date cannot,6/6/16, be before the start date,7/21/18.
ERROR:root:The end date cannot,5/2/18, be before the start date,6/9/18.
ERROR:root:The end date cannot,3/14/18, be before the start date,11/18/18.
ERROR:root:The end date cannot,3/7/17, be before the start date,4/28/18.
ERROR:root:The end date cannot,5/23/16, be before the start date,5/18/18.
ERROR:root:The end date cannot,3/5/17, be before the start date,4/25/17.
ERROR:root:The end date cannot,11/26/16, be before the start date,7/28/18.
ERROR:root:The end date cannot,4/8/17, be before the start date,8/2/18.
ERROR:root:The end date cannot,1/29/17, be before the start date,3/26/18.
ERROR:root:The end date cannot,4/28/16, be before the start date,3/12/17.
ERROR:root:The end date cannot,5/9/18, be before the start date,8/21/18.
ERROR:root:The end date cannot,8/17/17, be before the start date,9/23/17.
ERROR:root:The end date cannot,2/3/17, be before the start date,6/2/18.
ERROR:root:The end date cannot,10/10/16, be before the start date,8/23/18.
ERROR:root:The end date cannot,7/31/16, be before the start date,6/22/17.
ERROR:root:The end date cannot,12/5/16, be before the start date,11/28/17.
ERROR:root:The end date cannot,4/20/17, be before the start date,6/17/18.
ERROR:root:The end date cannot,7/4/16, be before the start date,10/30/16.
ERROR:root:The end date cannot,11/22/16, be before the start date,3/15/17.
ERROR:root:The end date cannot,6/1/17, be before the start date,6/20/18.
ERROR:root:The end date cannot,3/21/16, be before the start date,5/31/17.
ERROR:root:The end date cannot,3/17/18, be before the start date,12/18/18.
ERROR:root:The end date cannot,11/3/17, be before the start date,11/15/17.
ERROR:root:The end date cannot,7/6/18, be before the start date,12/22/18.
ERROR:root:The end date cannot,9/25/17, be before the start date,8/18/18.
ERROR:root:The end date cannot,9/18/17, be before the start date,4/22/18.
ERROR:root:The end date cannot,4/15/17, be before the start date,3/15/18.
ERROR:root:The end date cannot,12/20/16, be before the start date,8/17/18.
ERROR:root:The end date cannot,9/29/16, be before the start date,6/10/18.
ERROR:root:The end date cannot,4/10/17, be before the start date,8/15/17.
ERROR:root:The end date cannot,11/22/17, be before the start date,5/10/18.
ERROR:root:The end date cannot,3/22/18, be before the start date,7/29/18.
ERROR:root:The end date cannot,10/26/17, be before the start date,2/18/18.
ERROR:root:The end date cannot,2/6/16, be before the start date,5/30/18.
ERROR:root:The end date cannot,10/30/17, be before the start date,12/7/18.
ERROR:root:The end date cannot,12/28/16, be before the start date,3/29/18.
ERROR:root:The end date cannot,11/22/16, be before the start date,6/5/18.
ERROR:root:The end date cannot,7/3/18, be before the start date,12/29/18.
ERROR:root:The end date cannot,8/29/16, be before the start date,6/30/17.
ERROR:root:The end date cannot,2/22/16, be before the start date,11/24/16.
ERROR:root:The end date cannot,7/3/16, be before the start date,7/28/17.
ERROR:root:The end date cannot,5/5/16, be before the start date,8/12/18.
ERROR:root:The end date cannot,6/19/17, be before the start date,1/9/18.
ERROR:root:The end date cannot,9/27/17, be before the start date,11/8/18.
ERROR:root:The end date cannot,6/16/16, be before the start date,11/10/16.
ERROR:root:The end date cannot,10/20/17, be before the start date,10/27/18.
ERROR:root:The end date cannot,5/30/16, be before the start date,9/5/17.
ERROR:root:The end date cannot,8/8/17, be before the start date,6/24/18.
ERROR:root:The end date cannot,4/15/17, be before the start date,6/15/17.
ERROR:root:The end date cannot,6/10/18, be before the start date,9/24/18.
ERROR:root:The end date cannot,5/15/16, be before the start date,7/14/18.
ERROR:root:The end date cannot,8/14/18, be before the start date,11/18/18.
ERROR:root:The end date cannot,2/27/16, be before the start date,11/25/18.
ERROR:root:The end date cannot,5/30/18, be before the start date,10/1/18.
ERROR:root:The end date cannot,7/13/17, be before the start date,11/21/17.
ERROR:root:The end date cannot,8/7/16, be before the start date,10/13/18.
ERROR:root:The end date cannot,1/22/17, be before the start date,8/1/17.
ERROR:root:The end date cannot,4/24/17, be before the start date,7/2/18.
ERROR:root:The end date cannot,4/28/17, be before the start date,5/2/17.
ERROR:root:The end date cannot,1/15/16, be before the start date,2/9/18.
ERROR:root:The end date cannot,7/5/16, be before the start date,1/27/17.
ERROR:root:The end date cannot,3/20/17, be before the start date,5/1/18.
ERROR:root:The end date cannot,6/26/17, be before the start date,12/23/18.
ERROR:root:The end date cannot,3/21/18, be before the start date,6/2/18.
ERROR:root:The end date cannot,5/4/16, be before the start date,8/26/16.
ERROR:root:The end date cannot,9/23/16, be before the start date,11/26/16.
ERROR:root:The end date cannot,1/2/16, be before the start date,2/23/17.
ERROR:root:The end date cannot,2/21/17, be before the start date,10/29/18.
ERROR:root:The end date cannot,8/29/16, be before the start date,3/2/18.
ERROR:root:The end date cannot,2/12/16, be before the start date,6/17/18.
ERROR:root:The end date cannot,1/12/17, be before the start date,6/12/17.
ERROR:root:The end date cannot,4/12/16, be before the start date,10/10/16.
ERROR:root:The end date cannot,2/7/16, be before the start date,9/17/17.
ERROR:root:The end date cannot,7/6/16, be before the start date,7/14/17.
ERROR:root:The end date cannot,9/6/16, be before the start date,11/4/17.
ERROR:root:The end date cannot,5/31/16, be before the start date,10/21/18.
ERROR:root:The end date cannot,1/30/18, be before the start date,3/5/18.
ERROR:root:The end date cannot,1/17/18, be before the start date,10/4/18.
ERROR:root:The end date cannot,6/29/17, be before the start date,9/30/17.
ERROR:root:The end date cannot,4/18/16, be before the start date,8/22/16.
ERROR:root:The end date cannot,8/1/17, be before the start date,7/22/18.
ERROR:root:The end date cannot,9/15/16, be before the start date,11/27/16.
ERROR:root:The end date cannot,1/7/16, be before the start date,1/13/16.
ERROR:root:The end date cannot,2/1/18, be before the start date,7/9/18.
ERROR:root:The end date cannot,8/7/18, be before the start date,9/16/18.
ERROR:root:The end date cannot,9/15/17, be before the start date,11/2/18.
ERROR:root:The end date cannot,3/20/16, be before the start date,2/24/17.
ERROR:root:The end date cannot,9/10/17, be before the start date,12/9/18.
ERROR:root:The end date cannot,4/29/16, be before the start date,9/9/17.
ERROR:root:The end date cannot,7/3/16, be before the start date,7/25/16.
ERROR:root:The end date cannot,2/13/16, be before the start date,10/20/18.
ERROR:root:The end date cannot,9/8/16, be before the start date,4/5/17.
ERROR:root:The end date cannot,6/26/17, be before the start date,7/19/18.
ERROR:root:The end date cannot,11/16/17, be before the start date,7/17/18.
ERROR:root:The end date cannot,1/27/16, be before the start date,9/13/18.
ERROR:root:The end date cannot,3/25/17, be before the start date,8/22/17.
ERROR:root:The end date cannot,7/4/16, be before the start date,10/5/18.
ERROR:root:The end date cannot,9/6/17, be before the start date,9/14/18.
ERROR:root:The end date cannot,2/13/18, be before the start date,4/27/18.
ERROR:root:The end date cannot,1/20/17, be before the start date,1/3/18.
ERROR:root:The end date cannot,8/20/16, be before the start date,7/2/18.
ERROR:root:The end date cannot,2/4/17, be before the start date,9/8/17.
ERROR:root:The end date cannot,3/31/16, be before the start date,1/4/18.
ERROR:root:The end date cannot,1/1/16, be before the start date,2/17/16.
ERROR:root:The end date cannot,1/30/16, be before the start date,11/27/16.
ERROR:root:The end date cannot,6/16/17, be before the start date,3/5/18.
ERROR:root:The end date cannot,4/24/17, be before the start date,7/24/18.
ERROR:root:The end date cannot,8/17/17, be before the start date,9/3/17.
ERROR:root:The end date cannot,11/13/16, be before the start date,11/27/16.
ERROR:root:The end date cannot,2/3/16, be before the start date,11/21/17.
ERROR:root:The end date cannot,10/19/18, be before the start date,12/31/18.
ERROR:root:The end date cannot,4/3/16, be before the start date,6/26/17.
ERROR:root:The end date cannot,6/2/18, be before the start date,7/6/18.
ERROR:root:The end date cannot,9/10/16, be before the start date,9/19/18.
ERROR:root:The end date cannot,7/29/17, be before the start date,8/27/17.
ERROR:root:The end date cannot,9/15/17, be before the start date,12/9/18.
ERROR:root:The end date cannot,3/5/16, be before the start date,7/14/16.
ERROR:root:The end date cannot,11/22/16, be before the start date,4/2/18.
ERROR:root:The end date cannot,12/8/16, be before the start date,9/26/17.
ERROR:root:The end date cannot,3/1/18, be before the start date,6/15/18.
ERROR:root:The end date cannot,4/2/16, be before the start date,12/23/17.
ERROR:root:The end date cannot,5/17/17, be before the start date,9/8/17.
ERROR:root:The end date cannot,1/15/17, be before the start date,5/18/17.
ERROR:root:The end date cannot,4/25/17, be before the start date,4/25/18.
ERROR:root:The end date cannot,8/8/16, be before the start date,10/9/17.
ERROR:root:The end date cannot,6/23/16, be before the start date,8/23/17.
ERROR:root:The end date cannot,1/12/16, be before the start date,9/25/18.
ERROR:root:The end date cannot,4/5/16, be before the start date,9/22/16.
ERROR:root:The end date cannot,2/13/18, be before the start date,9/2/18.
ERROR:root:The end date cannot,3/8/16, be before the start date,10/6/17.
ERROR:root:The end date cannot,11/17/16, be before the start date,2/19/17.
ERROR:root:The end date cannot,5/6/16, be before the start date,11/24/17.
ERROR:root:The end date cannot,4/23/17, be before the start date,8/18/17.
ERROR:root:The end date cannot,9/2/17, be before the start date,11/17/17.
ERROR:root:The end date cannot,11/24/16, be before the start date,8/18/17.
ERROR:root:The end date cannot,11/5/16, be before the start date,5/26/17.
ERROR:root:The end date cannot,10/13/17, be before the start date,2/16/18.
ERROR:root:The end date cannot,10/18/17, be before the start date,9/2/18.
ERROR:root:The end date cannot,8/8/17, be before the start date,10/16/17.
ERROR:root:The end date cannot,3/30/17, be before the start date,9/14/17.
ERROR:root:The end date cannot,8/22/16, be before the start date,1/6/17.
ERROR:root:The end date cannot,5/20/17, be before the start date,12/9/17.
ERROR:root:The end date cannot,7/10/18, be before the start date,9/19/18.
ERROR:root:The end date cannot,7/14/17, be before the start date,12/3/17.
ERROR:root:The end date cannot,7/6/18, be before the start date,12/13/18.
ERROR:root:The end date cannot,1/5/16, be before the start date,2/10/18.
ERROR:root:The end date cannot,7/28/17, be before the start date,3/15/18.
ERROR:root:The end date cannot,1/6/16, be before the start date,12/2/18.
ERROR:root:The end date cannot,2/21/18, be before the start date,6/18/18.
ERROR:root:The end date cannot,10/13/16, be before the start date,10/23/16.
ERROR:root:The end date cannot,12/28/16, be before the start date,7/13/18.

C:\Python220\Python220A_2019\students\kevin_cavanaugh\Lesson02\assignment\src>python charges_calc.py --input source.json --output output.json
